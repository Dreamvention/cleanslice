// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from '@hey-api/client-axios';
import type {
  UploadFileData,
  GetSignedUrlData,
  GetSignedUrlResponse,
  GetFilesData,
  GetFilesResponse,
  CreateFileData,
  CreateFileResponse,
  DeleteFileData,
  DeleteFileResponse,
  GetFileData,
  GetFileResponse,
  GetUsersData,
  GetUsersResponse,
  CreateUserData,
  CreateUserResponse,
  DeleteUserData,
  GetUserData,
  GetUserResponse,
  UpdateUserData,
  UpdateUserResponse,
  MeData,
  MeResponse,
  MeError,
  LoginData,
  LoginResponse,
  LoginError,
  RegisterData,
  RegisterResponse,
  RegisterError,
  ConfirmEmailData,
  ConfirmEmailError,
  ResendConfirmationData,
  ResendConfirmationError,
  RefreshTokenData,
  RefreshTokenResponse,
  RefreshTokenError,
  GetApiKeysData,
  GetApiKeysResponse,
  CreateApiKeyData,
  CreateApiKeyResponse,
  DeleteApiKeyData,
  DeleteApiKeyResponse,
  GetApiKeyData,
  GetApiKeyResponse,
  UpdateApiKeyData,
  UpdateApiKeyResponse,
  GetTeamsData,
  GetTeamsResponse,
  CreateTeamData,
  CreateTeamResponse,
  DeleteTeamData,
  GetTeamData,
  GetTeamResponse,
  UpdateTeamData,
  UpdateTeamResponse,
  MailControllerHandleMailBouncesData,
  MailControllerHandleMailComplaintsData,
  MailControllerHandleMailDeliveriesData,
  GetHealthData,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class FilesService {
  /**
   * Upload a File
   */
  public static uploadFile<ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
      ...formDataBodySerializer,
      url: '/teams/{teamId}/files/upload',
      ...options,
      headers: {
        'Content-Type': null,
        ...options?.headers,
      },
    });
  }

  /**
   * Get Signed Url
   */
  public static getSignedUrl<ThrowOnError extends boolean = false>(options: Options<GetSignedUrlData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<GetSignedUrlResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/files/signedUrl',
      ...options,
    });
  }

  /**
   * Get all Files
   */
  public static getFiles<ThrowOnError extends boolean = false>(options: Options<GetFilesData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<GetFilesResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/files',
      ...options,
    });
  }

  /**
   * Create Files
   */
  public static createFile<ThrowOnError extends boolean = false>(options: Options<CreateFileData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<CreateFileResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/files',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * Delete File
   */
  public static deleteFile<ThrowOnError extends boolean = false>(options: Options<DeleteFileData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).delete<DeleteFileResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/files/{id}',
      ...options,
    });
  }

  /**
   * Get all Files
   */
  public static getFile<ThrowOnError extends boolean = false>(options: Options<GetFileData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<GetFileResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/files/{id}',
      ...options,
    });
  }
}

export class UsersService {
  /**
   * List all users
   */
  public static getUsers<ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, unknown, ThrowOnError>({
      url: '/users',
      ...options,
    });
  }

  /**
   * Create a new user
   */
  public static createUser<ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, unknown, ThrowOnError>({
      url: '/users',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * Delete a user
   */
  public static deleteUser<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
      url: '/users/{id}',
      ...options,
    });
  }

  /**
   * Get a user
   */
  public static getUser<ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<GetUserResponse, unknown, ThrowOnError>({
      url: '/users/{id}',
      ...options,
    });
  }

  /**
   * Update a user
   */
  public static updateUser<ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).put<UpdateUserResponse, unknown, ThrowOnError>({
      url: '/users/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }
}

export class AuthService {
  /**
   * Get Current User
   * Retrieves the profile information of the currently authenticated user. Requires a valid JWT access token.
   */
  public static me<ThrowOnError extends boolean = false>(options?: Options<MeData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<MeResponse, MeError, ThrowOnError>({
      url: '/auth/me',
      ...options,
    });
  }

  /**
   * User Login
   * Authenticates a user and returns JWT access and refresh tokens.
   */
  public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<LoginResponse, LoginError, ThrowOnError>({
      url: '/auth/login',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * User Registration
   * Creates a new user account. The user will receive a confirmation email to verify their email address.
   */
  public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<RegisterResponse, RegisterError, ThrowOnError>({
      url: '/auth/register',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * Confirm Email
   * Confirms a user's email address using the token sent in the confirmation email.
   */
  public static confirmEmail<ThrowOnError extends boolean = false>(options: Options<ConfirmEmailData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<unknown, ConfirmEmailError, ThrowOnError>({
      url: '/auth/confirm',
      ...options,
    });
  }

  /**
   * Resend Confirmation Email
   * Resends the email confirmation link to the specified email address.
   */
  public static resendConfirmation<ThrowOnError extends boolean = false>(
    options: Options<ResendConfirmationData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<unknown, ResendConfirmationError, ThrowOnError>({
      url: '/auth/resendConfirm',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * Refresh Access Token
   * Generates a new access token using a valid refresh token.
   */
  public static refreshToken<ThrowOnError extends boolean = false>(options: Options<RefreshTokenData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<RefreshTokenResponse, RefreshTokenError, ThrowOnError>({
      url: '/auth/refreshToken',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }
}

export class ApiKeysService {
  /**
   * Get all apiKeys
   */
  public static getApiKeys<ThrowOnError extends boolean = false>(options: Options<GetApiKeysData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<GetApiKeysResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/apiKeys',
      ...options,
    });
  }

  /**
   * Create an apiKey
   */
  public static createApiKey<ThrowOnError extends boolean = false>(options: Options<CreateApiKeyData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<CreateApiKeyResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/apiKeys',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * Delete an apiKey
   */
  public static deleteApiKey<ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).delete<DeleteApiKeyResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/apiKeys/{id}',
      ...options,
    });
  }

  /**
   * Get an apiKey
   */
  public static getApiKey<ThrowOnError extends boolean = false>(options: Options<GetApiKeyData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<GetApiKeyResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/apiKeys/{id}',
      ...options,
    });
  }

  /**
   * Edit an apiKey
   */
  public static updateApiKey<ThrowOnError extends boolean = false>(options: Options<UpdateApiKeyData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).put<UpdateApiKeyResponse, unknown, ThrowOnError>({
      url: '/teams/{teamId}/apiKeys/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }
}

export class TeamsService {
  /**
   * List all teams by User
   */
  public static getTeams<ThrowOnError extends boolean = false>(options?: Options<GetTeamsData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<GetTeamsResponse, unknown, ThrowOnError>({
      url: '/teams',
      ...options,
    });
  }

  /**
   * Create an team
   */
  public static createTeam<ThrowOnError extends boolean = false>(options: Options<CreateTeamData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<CreateTeamResponse, unknown, ThrowOnError>({
      url: '/teams',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * Delete a team
   */
  public static deleteTeam<ThrowOnError extends boolean = false>(options: Options<DeleteTeamData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
      url: '/teams/{id}',
      ...options,
    });
  }

  /**
   * Get a team
   */
  public static getTeam<ThrowOnError extends boolean = false>(options: Options<GetTeamData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<GetTeamResponse, unknown, ThrowOnError>({
      url: '/teams/{id}',
      ...options,
    });
  }

  /**
   * Update a team
   */
  public static updateTeam<ThrowOnError extends boolean = false>(options: Options<UpdateTeamData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).put<UpdateTeamResponse, unknown, ThrowOnError>({
      url: '/teams/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }
}

export class MailService {
  public static mailControllerHandleMailBounces<ThrowOnError extends boolean = false>(
    options?: Options<MailControllerHandleMailBouncesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
      url: '/mail/bounces',
      ...options,
    });
  }

  public static mailControllerHandleMailComplaints<ThrowOnError extends boolean = false>(
    options?: Options<MailControllerHandleMailComplaintsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
      url: '/mail/complaints',
      ...options,
    });
  }

  public static mailControllerHandleMailDeliveries<ThrowOnError extends boolean = false>(
    options?: Options<MailControllerHandleMailDeliveriesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
      url: '/mail/deliveries',
      ...options,
    });
  }
}

export class HealthService {
  /**
   * Get Health status
   */
  public static getHealth<ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
      url: '/health',
      ...options,
    });
  }
}
