### App settings for local ###
# Environtment types: dev, stage or prod
ENVIRONMENT=dev

# Running on localhost or in AWS
LOCAL=true

# Domain whitelist for accessing the API with Api Keys 
WHITELIST=localhost

# Debug NestJs
# Activate NestJS debug module and follow these instructions https://docs.nestjs.com/devtools/overview.
# https://devtools.nestjs.com/
# NEST_DEBUG=true


### Single User ###
# Feature "Single User": set SINGLE_USER_ID to grant new users access to a commonly shared account. 
# You will need to register the first user manually to obtaine the UserId.
# SINGLE_USER_ID=<USERID>


### Indexing Sources ###
# Set the Index Lamdba function name 
INDEXING_LAMBDA_FUNCTION_NAME=sources

### AWS COGNITO ###
COGNITO_ENDPOINT=http://localhost:9229
SNS_TOPIC_ARN_BOUNCE=bounce
SNS_TOPIC_ARN_DELIVERY=delivery
SNS_TOPIC_ARN_COMPLAINT=complaint

#### AWS RDS ###
# Possible providers : sqlite or postgresql
# Possible services: docker, RDS or neon.

# PROVIDER "postgreSQL" from RDS
# This parameter will be defined in the terraform slice.

# PROVIDER "postgreSQL" from Neon
# Follow instructions for NEON https://www.prisma.io/docs/orm/overview/databases/neon
# https://console.neon.tech/
# DATABASE_URL=...
# DIRECT_URL=...

# PROVIDER postgreSQL from docker
DATABASE_URL=postgres://postgres:root@127.0.0.1:5432/<PROJECT>-api-local-database

# PROVIDER sqlite
# DATABASE_URL=file:./dev.db
# DIRECT_URL=file:./dev.db



### AWS DynamoDB ###
# Dynamo DB stores chats and messages, as well as tasks for indexing
DYNAMO_ENDPOINT=http://localhost:8000
DYNAMO_TABLE=<PROJECT>-table


### AWS S3 ###
# Stores files for indexing
# For local development, you need to create a bucket in Docker and set the policy for it. Run the following command in terminal:
# aws --endpoint-url=http://localhost:19025 s3api create-bucket --bucket <PROJECT>-api-local-static && awslocal --endpoint-url=http://localhost:19025 s3api put-bucket-policy --bucket <PROJECT>-api-local-static --policy file://scripts/s3-local-policy.json
S3_ENDPOINT=http://localhost:19025
S3_BUCKET_NAME=<PROJECT>-api-local-static

# Only for Local: allows access to S3 bucket via a proxy
CORS_ENDPOINT=http://localhost:3333/cors-proxy 


### AWS Opensearch ###
# This is the Vector Database for the RAG pipeline. It stores data chunks and ther embeddings
OPENSEARCH_URL=http://localhost:9200
OPENSEARCH_INDEX=documents


### AWS Bedrock ###
# Provides access to Claude, Titan and LLama LLMs
AWS_ACCESS_KEY_ID=...
AWS_SECRET_ACCESS_KEY=...
AWS_REGION=us-east-1
AWS_BEDROCK_WAIT=1000 #in ms. eq. 1 sec.


### Openai ###
# Provides access to GPTs
# https://platform.openai.com/api-keys
OPENAI_API_KEY=...


### Cohere ai ###
# Cohere is used for ranking documents before adding to prompt.
# https://dashboard.cohere.com/api-keys
COHERE_API_KEY=...


### Groq ###
# Provides fast inference on LPUs
# https://console.groq.com/keys
GROQ_API_KEY=...


### Huggingface ###
# Currently not used
# https://huggingface.co/settings/tokens
HUGGINGFACEHUB_API_KEY=...


### Unstructured API ###
# Use to partition large data sets into logical chunks
# https://unstructured.io/platform

# Unstructured from Docker 
# UNSTRUCTURED_API_URL="http://localhost:8800/general/v0/general"

# Unstructured Cloud
UNSTRUCTURED_API_URL=https://api.unstructured.io
UNSTRUCTURED_API_KEY=...

### Langsmith ###
# Provides cost analisys for you LLMs
# https://smith.langchain.com
LANGCHAIN_TRACING_V2=true
LANGCHAIN_ENDPOINT=https://api.smith.langchain.com
LANGCHAIN_API_KEY=...
LANGCHAIN_PROJECT=<PROJECT>-prod


### Redis ###
# Provides a caching database. We do not use ElastiCache due to its heigh price

# Redis from Upstash
# https://console.upstash.com/redis
# REDIS_URL=rediss://default...

# Radis from docker
REDIS_URL=redis://localhost:6379
REDIS_EXPIRE=86400


### GragRAG ###
# Feature "GraphRag": Set GRAPH to true to allow users to Index Knowledge with GraphRAG capabilities.
GRAPH=true
GRAPH_ENTITY_TYPES=user,app,device,feature,issue,solution
GRAPH_RELATIONSHIP_TYPES=metioned_by,solved_by,used_by,has


### Neo4j ###
# This is a Graph Database used as part of the GraphRAG feature. 

# Neo4j cloud
# https://console.neo4j.io
NEO4J_URL=neo4j+s://0535294e.databases.neo4j.io:7687
NEO4J_USERNAME=neo4j
NEO4J_PASSWORD=...

# Neo4j from docker
# NEO4J_URL=bolt://localhost:7999
# NEO4J_USERNAME=neo4j
# NEO4J_PASSWORD=test


SLACK_CHAT_URL=...

# Email Configuration
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@example.com
SMTP_PASS=your-password
SMTP_FROM=noreply@example.com
FRONTEND_URL=http://localhost:3000