// This file is auto-generated by @hey-api/openapi-ts

export type UploadFileDto = {
    file: (Blob | File);
};

export type SingleModel = {
    success: boolean;
};

export type SignedUrlDto = {
    url: string;
    path: string;
};

export type FileDto = {
    id: string;
    teamId: string;
    name: string;
    contentType: string;
    path: string;
    url: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateFileDto = {
    contentType: string;
    name: string;
    path: string;
};

export type ListModel = {
    [key: string]: unknown;
};

export type SuccessModel = {
    success: boolean;
};

export type MetaListDto = {
    total: number;
    lastPage: number;
    currentPage: number;
    perPage: number;
    prev: number;
    next: number;
};

export type PaginationModel = {
    meta: MetaListDto;
};

export type Role = 'user' | 'admin';

export const Role = {
    USER: 'user',
    ADMIN: 'admin'
} as const;

export type UserDto = {
    id: string;
    name: string;
    email: string;
    emailError: boolean;
    emailErrorDescription: string;
    verified: boolean;
    banned: boolean;
    roles: Array<Role>;
    createdAt: string;
    updatedAt: string;
};

export type CreateUserDto = {
    name: string;
    email: string;
    roles: Array<('user' | 'admin')>;
};

export type UpdateUserDto = {
    name?: string;
    email?: string;
    roles: Array<Role>;
};

export type LoginUserDto = {
    email: string;
    password: string;
    deviceId: string;
};

export type AuthDto = {
    id: string;
    accessToken: string;
    refreshToken: string;
};

export type RegisterUserDto = {
    name: string;
    email: string;
    password: string;
    deviceId: string;
};

export type BaseErrorDto = {
    statusCode: number;
    code: string;
    message: string;
    timestamp: string;
    path: string;
};

export type RefreshTokenDto = {
    token: string;
};

export type ApiKeyDto = {
    id: string;
    teamId: string;
    name: string;
    secret: string;
    lastUsedAt: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateApiKeyDto = {
    name: string;
};

export type UpdateApiKeyDto = {
    name: string;
};

export type TeamDto = {
    id: string;
    codename: string;
    name: string;
    userId: string;
    user: UserDto;
    vectorId: string;
    vectorTable: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateTeamDto = {
    name: string;
    codename: string;
};

export type UpdateTeamDto = {
    name: string;
    codename: string;
};

export type UploadFileData = {
    formData: UploadFileDto;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type UploadFileResponse = (unknown);

export type GetSignedUrlData = {
    contentType: string;
    path: string;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type GetSignedUrlResponse = ((SingleModel & {
    data?: SignedUrlDto;
}));

export type CreateFileData = {
    requestBody: CreateFileDto;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type CreateFileResponse = ((SingleModel & {
    data?: FileDto;
}));

export type GetFilesData = {
    contentType?: string;
    /**
     * The ID of the team
     */
    teamId: unknown;
    type?: string;
};

export type GetFilesResponse = ((ListModel & {
    data?: Array<FileDto>;
}));

export type GetFileData = {
    id: string;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type GetFileResponse = ((SingleModel & {
    data?: FileDto;
}));

export type DeleteFileData = {
    id: string;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type DeleteFileResponse = ((SuccessModel));

export type GetUsersData = {
    email?: string;
    ids?: Array<(string)>;
    lastKey?: string;
    perPage?: number;
    search?: string;
};

export type GetUsersResponse = ((PaginationModel & {
    data?: Array<UserDto>;
}));

export type CreateUserData = {
    requestBody: CreateUserDto;
};

export type CreateUserResponse = ((SingleModel & {
    data?: UserDto;
}));

export type GetUserData = {
    id: string;
};

export type GetUserResponse = ((SingleModel & {
    data?: UserDto;
}));

export type UpdateUserData = {
    id: string;
    requestBody: UpdateUserDto;
};

export type UpdateUserResponse = ((SingleModel & {
    data?: UserDto;
}));

export type DeleteUserData = {
    id: string;
};

export type DeleteUserResponse = (unknown);

export type MeResponse = ((SingleModel & {
    data?: UserDto;
}));

export type LoginData = {
    requestBody: LoginUserDto;
};

export type LoginResponse = (AuthDto);

export type RegisterData = {
    requestBody: RegisterUserDto;
};

export type RegisterResponse = (UserDto);

export type RefreshData = {
    requestBody: RefreshTokenDto;
};

export type RefreshResponse = (AuthDto);

export type AuthControllerConfirmData = {
    code: string;
    redirectUrl: string;
    username: string;
};

export type AuthControllerConfirmResponse = (unknown);

export type ResendConfirmData = {
    requestBody: {
        name: string;
    };
};

export type ResendConfirmResponse = (unknown);

export type GetApiKeysData = {
    name?: string;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type GetApiKeysResponse = ((ListModel & {
    data?: Array<ApiKeyDto>;
}));

export type CreateApiKeyData = {
    requestBody: CreateApiKeyDto;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type CreateApiKeyResponse = ((SingleModel & {
    data?: ApiKeyDto;
}));

export type GetApiKeyData = {
    id: string;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type GetApiKeyResponse = ((SingleModel & {
    data?: ApiKeyDto;
}));

export type UpdateApiKeyData = {
    id: string;
    requestBody: UpdateApiKeyDto;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type UpdateApiKeyResponse = ((SingleModel & {
    data?: ApiKeyDto;
}));

export type DeleteApiKeyData = {
    id: string;
    /**
     * The ID of the team
     */
    teamId: unknown;
};

export type DeleteApiKeyResponse = ((SuccessModel));

export type GetTeamsData = {
    ids?: Array<(string)>;
    page?: number;
    perPage?: number;
    search?: string;
};

export type GetTeamsResponse = ((PaginationModel & {
    data?: Array<TeamDto>;
}));

export type CreateTeamData = {
    requestBody: CreateTeamDto;
};

export type CreateTeamResponse = ((SingleModel & {
    data?: TeamDto;
}));

export type GetTeamData = {
    id: string;
};

export type GetTeamResponse = ((SingleModel & {
    data?: TeamDto;
}));

export type UpdateTeamData = {
    id: string;
    requestBody: UpdateTeamDto;
};

export type UpdateTeamResponse = ((SingleModel & {
    data?: TeamDto;
}));

export type DeleteTeamData = {
    id: string;
};

export type DeleteTeamResponse = (unknown);

export type MailsControllerHandleMailBouncesResponse = (unknown);

export type MailsControllerHandleMailComplaintsResponse = (unknown);

export type MailsControllerHandleMailDeliveriesResponse = (unknown);

export type GetHealthResponse = (unknown);