// This file is auto-generated by @hey-api/openapi-ts

export type UploadFileDto = {
    file: Blob | File;
};

export type SingleModel = {
    success: boolean;
};

export type SignedUrlDto = {
    url: string;
    path: string;
};

export type FileDto = {
    id: string;
    teamId: string;
    name: string;
    contentType: string;
    path: string;
    url: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateFileDto = {
    contentType: string;
    name: string;
    path: string;
};

export type ListModel = {
    [key: string]: unknown;
};

export type SuccessModel = {
    success: boolean;
};

export type MetaListDto = {
    total: number;
    lastPage: number;
    currentPage: number;
    perPage: number;
    prev: number;
    next: number;
};

export type PaginationModel = {
    meta: MetaListDto;
};

export enum Role {
    USER = 'user',
    ADMIN = 'admin'
}

export type UserDto = {
    id: string;
    name: string;
    email: string;
    emailError: boolean;
    emailErrorDescription: string;
    verified: boolean;
    banned: boolean;
    roles: Array<Role>;
    createdAt: string;
    updatedAt: string;
};

export type CreateUserDto = {
    name: string;
    email: string;
    roles: Array<'user' | 'admin'>;
};

export type UpdateUserDto = {
    name?: string;
    email?: string;
    roles: Array<Role>;
};

export type LoginUserDto = {
    email: string;
    password: string;
    deviceId: string;
};

export type AuthDto = {
    id: string;
    accessToken: string;
    refreshToken: string;
};

export type RegisterUserDto = {
    name: string;
    email: string;
    password: string;
    deviceId: string;
};

export type BaseErrorDto = {
    statusCode: number;
    code: string;
    message: string;
    timestamp: string;
    path: string;
};

export type RefreshTokenDto = {
    token: string;
};

export type ApiKeyDto = {
    id: string;
    teamId: string;
    name: string;
    secret: string;
    lastUsedAt: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateApiKeyDto = {
    name: string;
};

export type UpdateApiKeyDto = {
    name: string;
};

export type TeamDto = {
    id: string;
    codename: string;
    name: string;
    userId: string;
    user: UserDto;
    vectorId: string;
    vectorTable: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateTeamDto = {
    name: string;
    codename: string;
};

export type UpdateTeamDto = {
    name: string;
    codename: string;
};

export type UploadFileData = {
    body: UploadFileDto;
    path: {
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: never;
    url: '/teams/{teamId}/files/upload';
};

export type UploadFileResponses = {
    201: unknown;
};

export type GetSignedUrlData = {
    body?: never;
    path: {
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query: {
        path: string;
        contentType: string;
    };
    url: '/teams/{teamId}/files/signedUrl';
};

export type GetSignedUrlResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: SignedUrlDto;
    };
};

export type GetSignedUrlResponse = GetSignedUrlResponses[keyof GetSignedUrlResponses];

export type GetFilesData = {
    body?: never;
    path: {
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: {
        type?: string;
        contentType?: string;
    };
    url: '/teams/{teamId}/files';
};

export type GetFilesResponses = {
    200: ListModel & {
        data?: Array<FileDto>;
    };
};

export type GetFilesResponse = GetFilesResponses[keyof GetFilesResponses];

export type CreateFileData = {
    body: CreateFileDto;
    path: {
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: never;
    url: '/teams/{teamId}/files';
};

export type CreateFileResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: FileDto;
    };
};

export type CreateFileResponse = CreateFileResponses[keyof CreateFileResponses];

export type DeleteFileData = {
    body?: never;
    path: {
        id: string;
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: never;
    url: '/teams/{teamId}/files/{id}';
};

export type DeleteFileResponses = {
    /**
     * Successfully received model list
     */
    200: SuccessModel;
};

export type DeleteFileResponse = DeleteFileResponses[keyof DeleteFileResponses];

export type GetFileData = {
    body?: never;
    path: {
        id: string;
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: never;
    url: '/teams/{teamId}/files/{id}';
};

export type GetFileResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: FileDto;
    };
};

export type GetFileResponse = GetFileResponses[keyof GetFileResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: {
        email?: string;
        search?: string;
        ids?: Array<string>;
        lastKey?: string;
        perPage?: number;
    };
    url: '/users';
};

export type GetUsersResponses = {
    200: PaginationModel & {
        data?: Array<UserDto>;
    };
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type CreateUserData = {
    body: CreateUserDto;
    path?: never;
    query?: never;
    url: '/users';
};

export type CreateUserResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: UserDto;
    };
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type DeleteUserResponses = {
    200: unknown;
};

export type GetUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type GetUserResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: UserDto;
    };
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body: UpdateUserDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UpdateUserResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: UserDto;
    };
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type MeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type MeResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: UserDto;
    };
};

export type MeResponse = MeResponses[keyof MeResponses];

export type LoginData = {
    body: LoginUserDto;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginResponses = {
    200: AuthDto;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type RegisterData = {
    body: RegisterUserDto;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterErrors = {
    /**
     * User already exists
     */
    409: BaseErrorDto;
};

export type RegisterError = RegisterErrors[keyof RegisterErrors];

export type RegisterResponses = {
    200: UserDto;
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type RefreshData = {
    body: RefreshTokenDto;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type RefreshResponses = {
    200: AuthDto;
};

export type RefreshResponse = RefreshResponses[keyof RefreshResponses];

export type AuthControllerConfirmData = {
    body?: never;
    path?: never;
    query: {
        code: string;
        username: string;
        redirectUrl: string;
    };
    url: '/auth/confirm';
};

export type AuthControllerConfirmResponses = {
    200: unknown;
};

export type ResendConfirmData = {
    body: {
        name: string;
    };
    path?: never;
    query?: never;
    url: '/auth/resendConfirm';
};

export type ResendConfirmResponses = {
    201: unknown;
};

export type GetApiKeysData = {
    body?: never;
    path: {
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: {
        name?: string;
    };
    url: '/teams/{teamId}/apiKeys';
};

export type GetApiKeysResponses = {
    200: ListModel & {
        data?: Array<ApiKeyDto>;
    };
};

export type GetApiKeysResponse = GetApiKeysResponses[keyof GetApiKeysResponses];

export type CreateApiKeyData = {
    body: CreateApiKeyDto;
    path: {
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: never;
    url: '/teams/{teamId}/apiKeys';
};

export type CreateApiKeyResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: ApiKeyDto;
    };
};

export type CreateApiKeyResponse = CreateApiKeyResponses[keyof CreateApiKeyResponses];

export type DeleteApiKeyData = {
    body?: never;
    path: {
        id: string;
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: never;
    url: '/teams/{teamId}/apiKeys/{id}';
};

export type DeleteApiKeyResponses = {
    /**
     * Successfully received model list
     */
    200: SuccessModel;
};

export type DeleteApiKeyResponse = DeleteApiKeyResponses[keyof DeleteApiKeyResponses];

export type GetApiKeyData = {
    body?: never;
    path: {
        id: string;
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: never;
    url: '/teams/{teamId}/apiKeys/{id}';
};

export type GetApiKeyResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: ApiKeyDto;
    };
};

export type GetApiKeyResponse = GetApiKeyResponses[keyof GetApiKeyResponses];

export type UpdateApiKeyData = {
    body: UpdateApiKeyDto;
    path: {
        id: string;
        /**
         * The ID of the team
         */
        teamId: unknown;
    };
    query?: never;
    url: '/teams/{teamId}/apiKeys/{id}';
};

export type UpdateApiKeyResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: ApiKeyDto;
    };
};

export type UpdateApiKeyResponse = UpdateApiKeyResponses[keyof UpdateApiKeyResponses];

export type GetTeamsData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        ids?: Array<string>;
        page?: number;
        perPage?: number;
    };
    url: '/teams';
};

export type GetTeamsResponses = {
    200: PaginationModel & {
        data?: Array<TeamDto>;
    };
};

export type GetTeamsResponse = GetTeamsResponses[keyof GetTeamsResponses];

export type CreateTeamData = {
    body: CreateTeamDto;
    path?: never;
    query?: never;
    url: '/teams';
};

export type CreateTeamResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: TeamDto;
    };
};

export type CreateTeamResponse = CreateTeamResponses[keyof CreateTeamResponses];

export type DeleteTeamData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/teams/{id}';
};

export type DeleteTeamResponses = {
    200: unknown;
};

export type GetTeamData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/teams/{id}';
};

export type GetTeamResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: TeamDto;
    };
};

export type GetTeamResponse = GetTeamResponses[keyof GetTeamResponses];

export type UpdateTeamData = {
    body: UpdateTeamDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/teams/{id}';
};

export type UpdateTeamResponses = {
    /**
     * Successfully received model list
     */
    200: SingleModel & {
        data?: TeamDto;
    };
};

export type UpdateTeamResponse = UpdateTeamResponses[keyof UpdateTeamResponses];

export type MailsControllerHandleMailBouncesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mails/bounces';
};

export type MailsControllerHandleMailBouncesResponses = {
    201: unknown;
};

export type MailsControllerHandleMailComplaintsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mails/complaints';
};

export type MailsControllerHandleMailComplaintsResponses = {
    201: unknown;
};

export type MailsControllerHandleMailDeliveriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mails/deliveries';
};

export type MailsControllerHandleMailDeliveriesResponses = {
    201: unknown;
};

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthResponses = {
    200: unknown;
};

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};