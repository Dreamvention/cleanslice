// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { UploadFileData, UploadFileResponse, GetSignedUrlData, GetSignedUrlResponse, CreateFileData, CreateFileResponse, GetFilesData, GetFilesResponse, GetFileData, GetFileResponse, DeleteFileData, DeleteFileResponse, GetUsersData, GetUsersResponse, CreateUserData, CreateUserResponse, GetUserData, GetUserResponse, UpdateUserData, UpdateUserResponse, DeleteUserData, DeleteUserResponse, MeResponse, LoginData, LoginResponse, RegisterData, RegisterResponse, RefreshData, RefreshResponse, AuthControllerConfirmData, AuthControllerConfirmResponse, ResendConfirmData, ResendConfirmResponse, GetApiKeysData, GetApiKeysResponse, CreateApiKeyData, CreateApiKeyResponse, GetApiKeyData, GetApiKeyResponse, UpdateApiKeyData, UpdateApiKeyResponse, DeleteApiKeyData, DeleteApiKeyResponse, GetTeamsData, GetTeamsResponse, CreateTeamData, CreateTeamResponse, GetTeamData, GetTeamResponse, UpdateTeamData, UpdateTeamResponse, DeleteTeamData, DeleteTeamResponse, MailsControllerHandleMailBouncesResponse, MailsControllerHandleMailComplaintsResponse, MailsControllerHandleMailDeliveriesResponse, GetHealthResponse } from './types.gen';

export class FilesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Upload a File
     * @param data The data for the request.
     * @param data.teamId The ID of the team
     * @param data.formData
     * @returns unknown
     * @throws ApiError
     */
    public uploadFile(data: UploadFileData): CancelablePromise<UploadFileResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/teams/{teamId}/files/upload',
            path: {
                teamId: data.teamId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * Get Signed Url
     * @param data The data for the request.
     * @param data.path
     * @param data.contentType
     * @param data.teamId The ID of the team
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public getSignedUrl(data: GetSignedUrlData): CancelablePromise<GetSignedUrlResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/teams/{teamId}/files/signedUrl',
            path: {
                teamId: data.teamId
            },
            query: {
                path: data.path,
                contentType: data.contentType
            }
        });
    }
    
    /**
     * Create Files
     * @param data The data for the request.
     * @param data.teamId The ID of the team
     * @param data.requestBody
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public createFile(data: CreateFileData): CancelablePromise<CreateFileResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/teams/{teamId}/files',
            path: {
                teamId: data.teamId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Get all Files
     * @param data The data for the request.
     * @param data.teamId The ID of the team
     * @param data.type
     * @param data.contentType
     * @returns unknown
     * @throws ApiError
     */
    public getFiles(data: GetFilesData): CancelablePromise<GetFilesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/teams/{teamId}/files',
            path: {
                teamId: data.teamId
            },
            query: {
                type: data.type,
                contentType: data.contentType
            }
        });
    }
    
    /**
     * Get all Files
     * @param data The data for the request.
     * @param data.id
     * @param data.teamId The ID of the team
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public getFile(data: GetFileData): CancelablePromise<GetFileResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/teams/{teamId}/files/{id}',
            path: {
                id: data.id,
                teamId: data.teamId
            }
        });
    }
    
    /**
     * Delete File
     * @param data The data for the request.
     * @param data.id
     * @param data.teamId The ID of the team
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public deleteFile(data: DeleteFileData): CancelablePromise<DeleteFileResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/teams/{teamId}/files/{id}',
            path: {
                id: data.id,
                teamId: data.teamId
            }
        });
    }
    
}

export class UsersService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * List all users
     * @param data The data for the request.
     * @param data.email
     * @param data.search
     * @param data.ids
     * @param data.lastKey
     * @param data.perPage
     * @returns unknown
     * @throws ApiError
     */
    public getUsers(data: GetUsersData = {}): CancelablePromise<GetUsersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users',
            query: {
                email: data.email,
                search: data.search,
                ids: data.ids,
                lastKey: data.lastKey,
                perPage: data.perPage
            }
        });
    }
    
    /**
     * Create a new user
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public createUser(data: CreateUserData): CancelablePromise<CreateUserResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/users',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Get a user
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public getUser(data: GetUserData): CancelablePromise<GetUserResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * Update a user
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public updateUser(data: UpdateUserData): CancelablePromise<UpdateUserResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/users/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Delete a user
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public deleteUser(data: DeleteUserData): CancelablePromise<DeleteUserResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/users/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class AuthService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Returns currently logged in user
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public me(): CancelablePromise<MeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/auth/me'
        });
    }
    
    /**
     * Login with email and password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AuthDto
     * @throws ApiError
     */
    public login(data: LoginData): CancelablePromise<LoginResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/login',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Register a new user
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserDto
     * @throws ApiError
     */
    public register(data: RegisterData): CancelablePromise<RegisterResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                409: 'User already exists'
            }
        });
    }
    
    /**
     * Refresh access token
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AuthDto
     * @throws ApiError
     */
    public refresh(data: RefreshData): CancelablePromise<RefreshResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/refresh',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.code
     * @param data.username
     * @param data.redirectUrl
     * @returns unknown
     * @throws ApiError
     */
    public authControllerConfirm(data: AuthControllerConfirmData): CancelablePromise<AuthControllerConfirmResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/auth/confirm',
            query: {
                code: data.code,
                username: data.username,
                redirectUrl: data.redirectUrl
            }
        });
    }
    
    /**
     * Resend confirm email to username
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public resendConfirm(data: ResendConfirmData): CancelablePromise<ResendConfirmResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/resendConfirm',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class ApiKeysService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get all apiKeys
     * @param data The data for the request.
     * @param data.teamId The ID of the team
     * @param data.name
     * @returns unknown
     * @throws ApiError
     */
    public getApiKeys(data: GetApiKeysData): CancelablePromise<GetApiKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/teams/{teamId}/apiKeys',
            path: {
                teamId: data.teamId
            },
            query: {
                name: data.name
            }
        });
    }
    
    /**
     * Create an apiKey
     * @param data The data for the request.
     * @param data.teamId The ID of the team
     * @param data.requestBody
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public createApiKey(data: CreateApiKeyData): CancelablePromise<CreateApiKeyResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/teams/{teamId}/apiKeys',
            path: {
                teamId: data.teamId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Get an apiKey
     * @param data The data for the request.
     * @param data.id
     * @param data.teamId The ID of the team
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public getApiKey(data: GetApiKeyData): CancelablePromise<GetApiKeyResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/teams/{teamId}/apiKeys/{id}',
            path: {
                id: data.id,
                teamId: data.teamId
            }
        });
    }
    
    /**
     * Edit an apiKey
     * @param data The data for the request.
     * @param data.id
     * @param data.teamId The ID of the team
     * @param data.requestBody
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public updateApiKey(data: UpdateApiKeyData): CancelablePromise<UpdateApiKeyResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/teams/{teamId}/apiKeys/{id}',
            path: {
                id: data.id,
                teamId: data.teamId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Delete an apiKey
     * @param data The data for the request.
     * @param data.id
     * @param data.teamId The ID of the team
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public deleteApiKey(data: DeleteApiKeyData): CancelablePromise<DeleteApiKeyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/teams/{teamId}/apiKeys/{id}',
            path: {
                id: data.id,
                teamId: data.teamId
            }
        });
    }
    
}

export class TeamsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * List all teams by User
     * @param data The data for the request.
     * @param data.search
     * @param data.ids
     * @param data.page
     * @param data.perPage
     * @returns unknown
     * @throws ApiError
     */
    public getTeams(data: GetTeamsData = {}): CancelablePromise<GetTeamsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/teams',
            query: {
                search: data.search,
                ids: data.ids,
                page: data.page,
                perPage: data.perPage
            }
        });
    }
    
    /**
     * Create an team
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public createTeam(data: CreateTeamData): CancelablePromise<CreateTeamResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/teams',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Get a team
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public getTeam(data: GetTeamData): CancelablePromise<GetTeamResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/teams/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * Update a team
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Successfully received model list
     * @throws ApiError
     */
    public updateTeam(data: UpdateTeamData): CancelablePromise<UpdateTeamResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/teams/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Delete a team
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public deleteTeam(data: DeleteTeamData): CancelablePromise<DeleteTeamResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/teams/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class MailsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public mailsControllerHandleMailBounces(): CancelablePromise<MailsControllerHandleMailBouncesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/mails/bounces'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public mailsControllerHandleMailComplaints(): CancelablePromise<MailsControllerHandleMailComplaintsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/mails/complaints'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public mailsControllerHandleMailDeliveries(): CancelablePromise<MailsControllerHandleMailDeliveriesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/mails/deliveries'
        });
    }
    
}

export class HealthService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Health status
     * @returns unknown
     * @throws ApiError
     */
    public getHealth(): CancelablePromise<GetHealthResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/health'
        });
    }
    
}